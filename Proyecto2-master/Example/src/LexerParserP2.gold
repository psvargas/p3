using gold.structures.automaton.*
using gold.visualization.automaton.*

procedure main(args:String[]) begin
	lexer = createTransducer()
	Parser = createAutomaton()
	GAutomataFrame.show(lexer)
   	GAutomataFrame.show(Parser)
   	testParser(lexer,Parser)
end

procedure testParser(M:ITransducer,P:IAutomaton) begin
	// M  is the lexer
	// P is the parser

   var sc:java.util.Scanner(System.$in)
   var input : String
   var line : String
	
	while true do
      	input := ""
       print "----------------------------"
		print "Input the program code and end with a blank line" 
		while (sc.hasNextLine()) do
		 	line:=sc.nextLine()  
		 	if line.isEmpty() then
	        	break
	     	end
        	input =  input + line + "\n"
      	end
		
		result:=M.acceptsString(input)    
		
		tokenStream := M.getOutputString()
		
		print "The LEXER "+(result?"accepted":"rejected")+" the input string."
		if result then
	   		print  "Resulting tokenStream: "+tokenStream
			result:=P.acceptsString(tokenStream )  //  The parser analyzes the tokenStream
			print "The PARSER "+(result?"accepted":"rejected")+" the token stream."
		end
	end
end 


function createAutomaton():IAutomaton begin
	Q:=(1‥26)
	Σ:={'R','V','B','E','A','M','D','T','F','P','S','t','h','d','n','v','b','p',',',';','(',')'}
	q₀:=1
	F:={26}
	Δ:=⟦⟦1,'R',2⟧,
	
		⟦2,'V',3⟧,
		⟦3,'v',4⟧,
		⟦4,',',3⟧,
		⟦4,'B',5⟧,
		

		⟦2,'B',5⟧,
		
		⟦5,'A',6⟧,
		⟦6,'(',7⟧,
		⟦7,'v',8⟧,
		⟦8,',',9⟧,
		⟦9,'n',10⟧,
		⟦10,')',11⟧,
		⟦11,';',5⟧,
		⟦11,'E',26⟧,
		
		⟦5,'M',12⟧,
		⟦12,'(',13⟧,
		⟦13,'n',10⟧,
		⟦13,'v',10⟧,
		⟦13,'n',22⟧,
		⟦13,'v',22⟧,
		⟦22,',',23⟧,
		⟦23,'b',10⟧,
		
		⟦5,'T',14⟧,
		⟦14,'(',15⟧,
		⟦15,'h',10⟧,
		⟦15,'t',10⟧,
		
		⟦5,'F',16⟧,
		⟦16,'(',17⟧,
		⟦17,'b',10⟧,
		
		⟦5,'P',18⟧,
		⟦18,'(',19⟧,
		⟦19,'p',20⟧,
		⟦20,',',21⟧,
		⟦21,'n',10⟧,
		⟦21,'v',10⟧,
		
		⟦5,'D',22⟧,
		⟦22,'(',23⟧,
		⟦23,'n',24⟧,
		⟦23,'v',24⟧,
		⟦24,',',25⟧,
		⟦25,'h',10⟧,
		⟦25,'d',10⟧,
		
		⟦5,'S',11⟧
		
		⟧
	
	M:=GNondeterministicAutomaton(Q,Σ,q₀,F,Δ)
	
	return M
end


function createTransducer():ITransducer begin
	//LEXER
	
	Q:= {"I" ,"Var", "Num", "R", "RO" ,"ROB", "ROBO", "ROBOT", "ROBOT_", "ROBOT_R" ,"V", "VA", "VAR", "VARS", "B", "BE", "BEG", "BEGI", "BEGIN", 
	"A", "As", "Ass", "Assi", "Assig", "Assign", "M", "Mo", "Mov", "Move", "MoveD", "MoveDi", "MoveDir", "T", "Tu", "Tur", "Turn", "F",
	"Fa", "Fac", "Face", "P", "Pu", "Put", "Pi", "Pic", "Pick", "S", "Sk", "Ski", "Skip", "l", "le", "lef", "left", "r", "ri", "rig", 
	"righ", "right", "a", "ar", "aro", "arou", "aroun", "around", "n", "no", "nor", "nort", "north", "s", "so", "sou", "sout", "south", "e", "ea", 
	"eas", "east", "w", "we", "wes", "west", "B", "Ba", "Bal", "Ball", "Ballo", "Balloo", "Balloon", "Balloons", "C", "Ch", "Chi", "Chip", 
	"Chips", "f", "fr", "fro", "fron", "front", "b", "ba", "bac", "back", "E", "EN", "END", "Err"}
	
	Σ:=('0'‥'9') ∪ ('a' ‥ 'z') ∪ ('A' ‥ 'Z') ∪ {';', '('  , ')', ' ', ',', '\n', '\t', '_'} 
   Skip := {' ',   '\n', '\t'}
   //R = ROBOT_R, V = VARS, B=BEGIN, E=END A = Assign, M = Move, T=Turn, F=Face, P = Put or Pick, S= Skip, t=around, h= right,left, d= front, back, p= Balloons or Chips, n= Number, v= Variable
   Out:={'(',')',',',';','R','V','B','A','M','D','T','F','P','S','t','h','d','f','p','n','v','b','E'} 
	q₀:="I"
	F:= {"I"}
	return 	GDeterministicTransducer(Q,Σ,Out,q₀,F,δ,g,h)
end

function δ(q,σ) begin
	if (q = "Err") then return "Err"
	elseif  σ ∈ {'('  ,')'  ,' ',  ',', '\n', '\t',';'} then return "I"	

   	elseif q= "I" and σ='R' then return "R"
   	elseif q= "I" and σ='V' then return "V"
   	elseif q= "I" and σ='B' then return "B"
   	elseif q= "I" and σ='A' then return "A"
   	elseif q= "I" and σ='M' then return "M"
   	elseif q= "I" and σ='T' then return "T"
   	elseif q= "I" and σ='F' then return "F"
   	elseif q= "I" and σ='P' then return "P"
   	elseif q= "I" and σ='S' then return "S"
   	elseif q= "I" and σ='l' then return "l"
   	elseif q= "I" and σ='r' then return "r"
   	elseif q= "I" and σ='a' then return "a"
   	elseif q= "I" and σ='n' then return "n"
   	elseif q= "I" and σ='e' then return "e"
   	elseif q= "I" and σ='w' then return "w"
   	elseif q= "I" and σ='C' then return "C"
   	elseif q= "I" and σ='f' then return "f"
   	elseif q= "I" and σ='b' then return "b"
   	elseif q= "I" and σ='s' then return "s"
   	elseif q= "I" and σ='E' then return "E"
   		
   	elseif q="I" and σ ∈ ('0' ‥ '9') then return "Num"
	elseif q="I" and σ ∈ ('a' ‥ 'z') then return "Var"
	elseif q="I" then return "I"	
		
	elseif	q="Num" and σ ∈ ('0' ‥ '9') then return "Num"
	elseif	q="Num" and σ ∈ ('a' ‥ 'z') then return "Err"
   		
	elseif q= "R" and σ='O' then return "RO"
	elseif q= "RO" and σ='B' then return "ROB"
	elseif q= "ROB" and σ='O' then return "ROBO"
	elseif q= "ROBO" and σ='T' then return "ROBOT"
	elseif q= "ROBOT" and σ='_' then return "ROBOT_"
	elseif q= "ROBOT_" and σ='R' then return "ROBOT_R"
	
	elseif q= "V" and σ='A' then return "VA"
	elseif q= "VA" and σ='R' then return "VAR"
	elseif q= "VAR" and σ='S' then return "VARS"
	
	elseif q= "B" and σ='E' then return "BE"
	elseif q= "BE" and σ='G' then return "BEG"
	elseif q= "BEG" and σ='I' then return "BEGI"
	elseif q= "BEGI" and σ='N' then return "BEGIN"
	
	elseif q= "A" and σ='s' then return "As"
	elseif q= "As" and σ='s' then return "Ass"
	elseif q= "Ass" and σ='i' then return "Assi"
	elseif q= "Assi" and σ='g' then return "Assig"
	elseif q= "Assig" and σ='n' then return "Assign"
	
	elseif q= "M" and σ='o' then return "Mo"
	elseif q= "Mo" and σ='v' then return "Mov"
	elseif q= "Mov" and σ='e' then return "Move"
	elseif q= "Move" and σ='D' then return "MoveD"
	elseif q= "MoveD" and σ='i' then return "MoveDi"
	elseif q= "MoveDi" and σ='r' then return "MoveDir"
	
	elseif q= "T" and σ='u' then return "Tu"
	elseif q= "Tu" and σ='r' then return "Tur"
	elseif q= "Tur" and σ='n' then return "Turn"
	
	elseif q= "F" and σ='a' then return "Fa"
	elseif q= "Fa" and σ='c' then return "Fac"
	elseif q= "Fac" and σ='e' then return "Face"
	
	elseif q= "P" and σ='u' then return "Pu"
	elseif q= "Pu" and σ='t' then return "Put"
	
	elseif q= "P" and σ='i' then return "Pi"
	elseif q= "Pi" and σ='c' then return "Pic"
	elseif q= "Pic" and σ='k' then return "Pick"
	
	elseif q= "S" and σ='k' then return "Sk"
	elseif q= "Sk" and σ='i' then return "Ski"
	elseif q= "Ski" and σ='p' then return "Skip"
	
	elseif q= "l" and σ='e' then return "le"
	elseif q= "le" and σ='f' then return "lef"
	elseif q= "lef" and σ='t' then return "left"
	
	elseif q= "r" and σ='i' then return "ri"
	elseif q= "ri" and σ='g' then return "rig"
	elseif q= "rig" and σ='h' then return "righ"
	elseif q= "righ" and σ='t' then return "right"
	
	elseif q= "a" and σ='r' then return "ar"
	elseif q= "ar" and σ='o' then return "aro"
	elseif q= "aro" and σ='u' then return "arou"
	elseif q= "arou" and σ='n' then return "aroun"
	elseif q= "aroun" and σ='d' then return "around"
	
	elseif q= "n" and σ='o' then return "no"
	elseif q= "no" and σ='r' then return "nor"
	elseif q= "nor" and σ='t' then return "nort"
	elseif q= "nort" and σ='h' then return "north"
	
	elseif q= "s" and σ='o' then return "so"
	elseif q= "so" and σ='u' then return "sou"
	elseif q= "sou" and σ='t' then return "sout"
	elseif q= "sout" and σ='h' then return "south"
	
	elseif q= "e" and σ='a' then return "ea"
	elseif q= "ea" and σ='s' then return "eas"
	elseif q= "eas" and σ='t' then return "east"
	
	elseif q= "w" and σ='e' then return "we"
	elseif q= "we" and σ='s' then return "wes"
	elseif q= "wes" and σ='t' then return "west"
	
	elseif q= "B" and σ='a' then return "Ba"
	elseif q= "Ba" and σ='l' then return "Bal"
	elseif q= "Bal" and σ='l' then return "Ball"
	elseif q= "Ball" and σ='o' then return "Ballo"
	elseif q= "Ballo" and σ='o' then return "Balloo"
	elseif q= "Balloo" and σ='n' then return "Balloon"
	elseif q= "Balloon" and σ='s' then return "Balloons"
	
	elseif q= "C" and σ='h' then return "Ch"
	elseif q= "Ch" and σ='i' then return "Chi"
	elseif q= "Chi" and σ='p' then return "Chip"
	elseif q= "Chip" and σ='s' then return "Chips"
	
	elseif q= "f" and σ='r' then return "fr"
	elseif q= "fr" and σ='o' then return "fro"
	elseif q= "fro" and σ='n' then return "fron"
	elseif q= "fron" and σ='t' then return "front"
	
	elseif q= "b" and σ='a' then return "ba"
	elseif q= "ba" and σ='c' then return "bac"
	elseif q= "bac" and σ='k' then return "back"
	
	elseif q= "E" and σ='N' then return "EN"
	elseif q= "EN" and σ='D' then return "END"
 	
    else  return "Var"
    
    end	
end 


function g(q) begin
	return λ
end

function h(q,σ) begin
var s: String
s := λ

	if q = "Err" then return λ
	elseif  σ ∈ {';'  ,'('  ,')'  ,' ',  ',', '\n', '\t'} then // separator or one character token  

	   if σ ∉ {' ', '\n', '\t'} then  s=String.valueOf(σ) end // one character symbol      
      
      if q=="I" then return s
      elseif q=="ROBOT_R" then return "R"+s 
      elseif q=="VARS" then return "V"+s
      elseif q=="BEGIN" then return "B"+s
      elseif q=="END" then return "E"+s
      elseif q=="Assign" then return "A"+s
      elseif q=="MoveDir" then return "D"+s
      elseif q=="Move" then return "M"+s  
      elseif q=="Turn" then return "T"+s
      elseif q=="Face" then return "F"+s
      elseif q=="Put" then return "P"+s
      elseif q=="Pick" then return "P"+s
      elseif q=="Skip" then return "S"+s
      elseif q=="around" then return "t"+s
      elseif q=="right" then return "h"+s
      elseif q=="left" then return "h"+s
      elseif q=="front" then return "d"+s
      elseif q=="back" then return "d"+s
      elseif q=="north" then return "b"+s
      elseif q=="south" then return "b"+s
      elseif q=="east" then return "b"+s
      elseif q=="west" then return "b"+s
      elseif q=="Balloons" then return "p"+s
      elseif q=="Chips" then return "p"+s
      elseif q=="Num" then return "n"+s
      else return "v"+s
      end
	else return  λ
	end
end